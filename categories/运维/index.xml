<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>运维 on 执子之手</title>
    <link>https://orchidflower.github.io/categories/%E8%BF%90%E7%BB%B4/</link>
    <description>Recent content in 运维 on 执子之手</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 01 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://orchidflower.github.io/categories/%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>无损扩容Linux磁盘分区容量</title>
      <link>https://orchidflower.github.io/2022/12/01/Expand-Linux-Partition-without-Data-Loss/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2022/12/01/Expand-Linux-Partition-without-Data-Loss/</guid>
      <description>&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;公司有台虚拟机，当初安装的时候给的磁盘容量偏小（80G），最近频繁报磁盘空间不足。因为上面跑了比较重要的服务，没有办法重装，只好考虑如何扩容。物理机上面的空闲空间还比较多，通过虚拟机管理软件修改了虚拟机的配置，很容易的把虚拟磁盘容量调大了，调整到了215G。&lt;/p&gt;
&lt;p&gt;虚拟磁盘调整后，就需要在&lt;code&gt;Linux&lt;/code&gt;系统中进行扩容操作。扩容主要有两步工作要做：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调整分区大小：将新增的空间添加到分区内容；需要用到工具&lt;code&gt;parted&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;调整文件系统大小：分区容量扩大后，使用&lt;code&gt;resize2fs&lt;/code&gt;命令将文件系统扩容到整个磁盘容量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：当时分区的时候没有选择&lt;code&gt;LVM&lt;/code&gt;管理，如果使用&lt;code&gt;LVM&lt;/code&gt;管理可以通过&lt;code&gt;lvextend&lt;/code&gt;命令进行分区的扩容，具体方法参考附录中的链接。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jenkins工作空间页面崩溃问题解决</title>
      <link>https://orchidflower.github.io/2021/10/22/Jenkins-crashed-in-workspace-page/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2021/10/22/Jenkins-crashed-in-workspace-page/</guid>
      <description>&lt;h1 id=&#34;1-问题&#34;&gt;1. 问题&lt;/h1&gt;
&lt;p&gt;最近发现一个问题：在 &lt;code&gt;Jenkins&lt;/code&gt; 中打开某些项目的工作空间（&lt;code&gt;WorkSpace&lt;/code&gt;）的时候，页面会崩溃，显示如下的错误信息：
&lt;img src=&#34;http://blog-cache.orchidflower.cn/mweb/16317740172888.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;Jenkins&lt;/code&gt; 日志发现如下错误信息，提示的是路径无效错误（&lt;code&gt;InvalidPathException&lt;/code&gt;），该目录应该是中文名字，猜测是编码转换出了错误。
&lt;img src=&#34;http://blog-cache.orchidflower.cn/mweb/16317740902097.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-解决&#34;&gt;2. 解决&lt;/h1&gt;
&lt;p&gt;由于是使用 &lt;code&gt;Docker&lt;/code&gt; 运行的 &lt;code&gt;Jenkins&lt;/code&gt;，登录进 &lt;code&gt;Jenkins&lt;/code&gt; 容器内部，查看对应的目录：
&lt;img src=&#34;http://blog-cache.orchidflower.cn/mweb/16317741870998.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现在容器内部看到的目录就是乱码了。而在外部环境可以正常显示目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog-cache.orchidflower.cn/mweb/16317743090169.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux常用命令介绍 05 - unzip</title>
      <link>https://orchidflower.github.io/2021/02/26/linux-command-introduction-05-unzip/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2021/02/26/linux-command-introduction-05-unzip/</guid>
      <description>&lt;p&gt;unzip命令可以用来解压zip文件。用法比较简单，但是有些不太常用的命令需要记录一下。&lt;/p&gt;
&lt;h1 id=&#34;1-查看文件列表&#34;&gt;1. 查看文件列表&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;unzip -l ShadowHunters.epub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看更详细信息，包括压缩率等&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;unzip -lv ShadowHunters.epub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-解压文件&#34;&gt;2. 解压文件&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;unzip -d ./temp ShadowHunters.epub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-解压一个文件&#34;&gt;3. 解压一个文件&lt;/h1&gt;
&lt;p&gt;使用&lt;code&gt;-p&lt;/code&gt;命令，将文件内容输出到标准输出，然后使用重定向创建文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;unzip -p ShadowHunters.epub ops/xhtml/cover.html &amp;gt; cover.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;4-更新文件&#34;&gt;4. 更新文件&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;zip -u ShadowHunters.epub ops/xhtml/cover.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用KeepAlived配置Nginx高可用</title>
      <link>https://orchidflower.github.io/2020/07/20/Use-keepalived-for-high-availability-support-for-nginx/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2020/07/20/Use-keepalived-for-high-availability-support-for-nginx/</guid>
      <description>&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;最近为一个传统行业的客户开发了一个生产调度系统。但是他的生产环境是自己搭建的，不是购买的云服务，因此碰到了一些问题。&lt;/p&gt;
&lt;p&gt;客户购买了多台高性能的物理机，在上面自行搭建虚拟机。但是只有虚拟机，没有提供类似负载均衡、数据库等基础服务。为了解决负载均衡问题，我们自行安装了 &lt;code&gt;Nginx&lt;/code&gt; 。为了保证系统健壮和性能，安装 &lt;code&gt;Nginx&lt;/code&gt; 的两台虚拟机（Ubuntu 18.04.3 LTS，172.16.45.22，172.16.45.26）分别部署在两台不同的物理机上（172.16.45.11， 172.168.45.12）。然后 &lt;code&gt;DNS&lt;/code&gt; 解析到两台 &lt;code&gt;Nginx&lt;/code&gt; 主机上。&lt;/p&gt;
&lt;p&gt;现在的问题是：客户的要求是任何一台物理机出现问题都要能够保证系统可用，验证的方式是测试的时候会直接断开物理机的网线，这将导致通过 &lt;code&gt;DNS&lt;/code&gt; 解析出来的 &lt;code&gt;Nginx&lt;/code&gt; 主机必然有一台是无法使用的。访问显然会出问题。&lt;/p&gt;
&lt;p&gt;经过考虑，最后选定解决办法是：使用 &lt;code&gt;KeepAlived&lt;/code&gt; 做高可用，两台 &lt;code&gt;Nginx&lt;/code&gt; 共同维护一个虚拟IP（172.16.45.50），&lt;code&gt;DNS&lt;/code&gt; 解析到这个虚拟IP上。&lt;/p&gt;
&lt;p&gt;这里简单记录一下安装 &lt;code&gt;KeepAlived&lt;/code&gt; 的过程以及碰到的一些问题及解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何修改Ubuntu服务器上的DNS设置</title>
      <link>https://orchidflower.github.io/2020/07/10/How-to-Change-DNS-on-Ubuntu/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2020/07/10/How-to-Change-DNS-on-Ubuntu/</guid>
      <description>&lt;p&gt;公司的几台服务器安装的时候设置了联通的DNS服务器，由于公司网络切换到了电信，最近经常出现解析服务器IP失败的情况。所以想着要更换一下DNS服务器，以提高网络访问速度。&lt;/p&gt;
&lt;p&gt;因为历史原因，服务器操作系统主要有 &lt;code&gt;Ubuntu 16.04 LTS&lt;/code&gt; 和 &lt;code&gt;Ubuntu 18.04 LTS&lt;/code&gt; 两种。实际修改中发现，他们的配置方法是不一样的，特此记录一下。&lt;/p&gt;
&lt;h1 id=&#34;1-ubuntu-1604-lts&#34;&gt;1. Ubuntu 16.04 LTS&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;16.04 LTS&lt;/code&gt;上主要修改两个文件。&lt;/p&gt;
&lt;h2 id=&#34;21-更新resolvconf&#34;&gt;2.1 更新resolv.conf&lt;/h2&gt;
&lt;p&gt;首先修改文件：&lt;code&gt;/etc/resolvconf/resolv.conf.d/base&lt;/code&gt;文件，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;nameserver&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;.114.114.114&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;nameserver&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;.5.5.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后执行：&lt;code&gt;resolvconf -u&lt;/code&gt;命令就可以更新dns服务器了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux常用命令介绍 04 - journalctl</title>
      <link>https://orchidflower.github.io/2020/04/20/linux-command-introduction-04-journalctl/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2020/04/20/linux-command-introduction-04-journalctl/</guid>
      <description>&lt;p&gt;&lt;code&gt;journalctl&lt;/code&gt;命令是&lt;code&gt;Systemd&lt;/code&gt;日志系统的一个命令，主要用途是用来查看通过&lt;code&gt;Systemd&lt;/code&gt;日志系统记录的日志。在&lt;code&gt;Systemd&lt;/code&gt;出现之前，&lt;code&gt;Linux&lt;/code&gt;系统及各应用的日志都是分别管理的，&lt;code&gt;Systemd&lt;/code&gt;开始统一管理了所有&lt;code&gt;Unit&lt;/code&gt;的启动日志，这样带来的好处就是可以只用一个 &lt;code&gt;journalctl&lt;/code&gt;命令，查看所有内核和应用的日志。&lt;/p&gt;
&lt;h1 id=&#34;1-基础用法&#34;&gt;1. 基础用法&lt;/h1&gt;
&lt;h2 id=&#34;11-查看所有日志&#34;&gt;1.1 查看所有日志&lt;/h2&gt;
&lt;p&gt;不用添加任何任何参数运行可以查看本次启动以来的所有日志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 显示本次启动以来的全部日志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;journalctl 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12-查看内核日志&#34;&gt;1.2 查看内核日志&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;-k&lt;/code&gt;参数可以查看内核日志。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 显示内核日志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;journalctl -k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Linux常用命令介绍 03 - tree</title>
      <link>https://orchidflower.github.io/2020/04/07/linux-command-introduction-03-tree/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2020/04/07/linux-command-introduction-03-tree/</guid>
      <description>&lt;p&gt;tree命令的作用是以树状图的形式列出目录的内容。通常在写文档时需要列一下文件目录结构，这个时候&lt;code&gt;tree&lt;/code&gt;命令就非常有用了&lt;/p&gt;
&lt;h1 id=&#34;1-安装使用&#34;&gt;1. 安装&amp;amp;使用&lt;/h1&gt;
&lt;p&gt;我用的Ubuntu上默认没有安装&lt;code&gt;tree&lt;/code&gt;命令。可以通过：&lt;code&gt;sudo apt install tree&lt;/code&gt;命令安装。其他的发行版参考对应的命令。&lt;/p&gt;
&lt;p&gt;直接使用&lt;code&gt;tree&lt;/code&gt;命令或者&lt;code&gt;tree [directory]&lt;/code&gt;命令即可列出目录中的内容。&lt;/p&gt;
&lt;h1 id=&#34;2-只列出目录&#34;&gt;2. 只列出目录&lt;/h1&gt;
&lt;p&gt;默认情况下，&lt;code&gt;tree&lt;/code&gt;命令会同时列出目录中的文件。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 列出全部内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;tree .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span&gt;├── Cargo.lock
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span&gt;├── Cargo.toml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span&gt;└── src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span&gt;    └── main.rs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; directory, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; files
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果不想显示文件，则可以使用&lt;code&gt;-d&lt;/code&gt;参数，只列出文件夹：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 只列出目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;tree -d .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span&gt;└── src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; directory
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Linux常用命令介绍 02 - ssh</title>
      <link>https://orchidflower.github.io/2020/03/29/linux-command-introduction-02-ssh/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2020/03/29/linux-command-introduction-02-ssh/</guid>
      <description>&lt;p&gt;SSH在Linux中占有重要的地位。通常我们远程登录服务器都是通过ssh协议，但是ssh命令（或者SSH协议）能够实现的功能还有很多。我日常用到一些，但是肯定还有各种各样的用法，有兴趣的朋友可以自行搜索更多资料。&lt;/p&gt;
&lt;h1 id=&#34;1-防止掉线&#34;&gt;1. 防止掉线&lt;/h1&gt;
&lt;p&gt;使用SSH连接服务器时候，通常第一个要修改的选项就是防止掉线。总体上来说有两类方法来防止服务器掉线：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端/客户端工具发送心跳包；&lt;/li&gt;
&lt;li&gt;服务器端发送心跳包。
如果有服务器的控制权，可以修改ssh的配置选项，推荐使用第二种方案，通常更有保障一些。如果没有服务器的控制权，那就只能用第一种了。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Linux常用命令介绍 01 - curl</title>
      <link>https://orchidflower.github.io/2020/03/13/linux-command-introduction-01-curl/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2020/03/13/linux-command-introduction-01-curl/</guid>
      <description>&lt;p&gt;很久没有更新博客了。之前一直用hexo，配置起来稍显复杂，单个的时间一长有些忘了，搞不起来了，于是荒废了很长时间。最近下定决心迁移到了Hugo上。总体感觉Hugo速度确实快，这一点非常喜欢。以后有时间可以介绍一下这次迁移的过程。&lt;/p&gt;
&lt;p&gt;这几年一直不间断的与Linux打交道，但是Linux的命令一直没有深入研究过，所以碰到问题的时候还是要各种搜索，挺麻烦的。这次想整理一个常用命令的介绍系列，把平常用到的命令简单介绍一下。不会是详尽的帮助类介绍，更多的是基于场景的介绍：譬如要实现什么功能用什么参数之类的。作为以后的备查吧，就不用再到处搜索了。：）&lt;/p&gt;
&lt;p&gt;第一个命令介绍curl。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker运行Jenkins（二）</title>
      <link>https://orchidflower.github.io/2017/08/20/Use-Webhook-between-Gogs-and-Jenkins/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/08/20/Use-Webhook-between-Gogs-and-Jenkins/</guid>
      <description>&lt;p&gt;Gitea 是一款极易搭建的自助 Git 服务，最初是fork子Gogs项目（Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务）。Gitea使用 Go 语言开发。使用 Go 语言开发使得 Gitea 能够通过独立的二进制分发，并且支持 Go 语言支持的 所有平台，包括 Linux、Mac OS X、Windows 以及 ARM 平台。&lt;/p&gt;
&lt;p&gt;Gitea占用资源小，比起Gitlab这种庞然大物来说简直是精致得要命。但是作为小团队的项目管理用来替代Gitlab还是基本能够满足需求的。而且Gitea（包括Gogs）社区还是挺活跃的，新功能也在逐渐增加中，个人很看好它的前景。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker运行Jenkins服务（一）</title>
      <link>https://orchidflower.github.io/2017/08/13/How-to-setup-Jenkins-in-Docker/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/08/13/How-to-setup-Jenkins-in-Docker/</guid>
      <description>&lt;h1 id=&#34;1-jenkins是什么&#34;&gt;1. Jenkins是什么？&lt;/h1&gt;
&lt;p&gt;某百科的解释是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个解释大体上是靠谱的，Jenkins的核心作用就是一个CI（持续集成）工具。CI的概念是：持续集成指的是，频繁地（一天多次）将代码集成到主干。持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。而Jenkins能够完成这些自动化构建、测试的大部分工作。&lt;/p&gt;
&lt;p&gt;Jenkins的前身是Hudson。这其中的渊源涉及到Oracle收购Java引起的版权纷争。有兴趣的可以看附录里面的相关链接。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell脚本中的一些特殊变量</title>
      <link>https://orchidflower.github.io/2017/08/05/Some-special-parameters-in-Shell/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/08/05/Some-special-parameters-in-Shell/</guid>
      <description>&lt;p&gt;Shell脚本的一些参数总是感觉记不住，特此记录一下，以备后查。&lt;/p&gt;
&lt;h1 id=&#34;1-参数说明&#34;&gt;1. 参数说明&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当前脚本的文件名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;mdash;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$n&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$#&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传递给脚本或函数的参数个数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传递给脚本或函数的所有参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$@&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传递给脚本或函数的所有参数。被双引号(&amp;quot; &amp;ldquo;)包含时，与 $* 稍有不同，下面将会讲到。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$?&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上个命令的退出状态，或函数的返回值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$$&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>xargs使用复杂参数</title>
      <link>https://orchidflower.github.io/2017/07/30/How-to-using-argument-in-xargs/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/07/30/How-to-using-argument-in-xargs/</guid>
      <description>&lt;p&gt;一般情况下xargs只处理一个参数，因此可以这样使用，最后的rm会自动补齐一个参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;find . | grep hello | xargs rm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是有时候需要多个参数才能够正常运行，这时候怎么办呢？可以这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;ls -1 2016*.log | xargs -I % -t tar czvf %.tar.gz % --remove-files
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述命令的意思是将当前目录中所有&lt;code&gt;2016*.log&lt;/code&gt;文件使用tar打包成tar.gz文件，并删除源文件。其中：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何无密码登录SSH</title>
      <link>https://orchidflower.github.io/2017/07/23/How-to-login-without-password-over-SSH/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/07/23/How-to-login-without-password-over-SSH/</guid>
      <description>&lt;p&gt;我们在用&lt;code&gt;Jenkins&lt;/code&gt;做发布工具的时候，经常用到的功能是通过&lt;code&gt;SSH&lt;/code&gt;通道完成各种功能。例如使用&lt;code&gt;scp&lt;/code&gt;命令拷贝安装包到服务器上，通过&lt;code&gt;ssh -t&lt;/code&gt;命令执行服务器上的脚本等。&lt;/p&gt;
&lt;p&gt;这时就需要配置无密码登录，否则无法做到自动执行命令。如果每次都手动输入密码，想想都不现实。要实现无密码登录，需要配置好SSH允许证书登录。&lt;/p&gt;
&lt;p&gt;其原理是使用了公钥体系，假设有服务器Server，用户在服务器Client上，用户在服务器Client上有私钥Private Key，在服务器Server上有对应的公钥Public Key。这样访问的时候Server就能够通过公钥体系进行验证：要求用户使用其私钥进行签名，从而确保用户拥有私钥，以此验证用户身份。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog-cache.orchidflower.cn/mweb/sshauthentication.png&#34; alt=&#34;公钥体系原理图&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在alias命令中使用单引号</title>
      <link>https://orchidflower.github.io/2017/07/16/How-to-using-single-quota-in-alias-command/</link>
      <pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/07/16/How-to-using-single-quota-in-alias-command/</guid>
      <description>&lt;p&gt;Linux中的alias命令可以将一条复杂的命令缩短为一个简单的指令，实际工作中经常会用到。使用alias的时候命令本身需要使用单引号包括起来。但是如果命令本身中包含单引号怎么办呢？&lt;/p&gt;
&lt;p&gt;例如，下面这条命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;ps -ef &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; grep shadowsocks/server.py &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; grep -v grep &lt;span style=&#34;color:#111&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其作用是获取任务的pid。其中用到的&lt;code&gt;awk&lt;/code&gt;的参数需要用到单引号。alias也可以使用双引号，但是如果用双引号，其中的内容会被转义解释成具体获得的值。而不是命令本身。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在Mac上添加一个虚拟IP</title>
      <link>https://orchidflower.github.io/2017/07/09/How-to-add-one-virtual-IP-on-Mac/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/07/09/How-to-add-one-virtual-IP-on-Mac/</guid>
      <description>&lt;p&gt;最近忙着系统重构，因为经常处于移动办公的状态，访问公司的服务器不是很方便，所以一些基础服务都是搭建在本机上。但是使用的时候碰到了一些问题，最大的问题是网络地址切换导致的：IP地址总是不固定。有些服务（例如FastDFS）需要有明确的IP地址来绑定服务。不固定的IP地址会给这些服务带来麻烦，需要修改配置重启服务。
这种情况下，最好的解决办法是能够给Mac分配一个固定的IP，不管怎么切换网络一直存在。幸好这个是可以解决的，而且并不复杂。方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;ifconfig lo0 alias 192.168.255.199
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其原理是给网络设备loopback增加一个alias。loopback设备一直存在，而且与en0设备独立，可以一直存在。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt免费证书的使用</title>
      <link>https://orchidflower.github.io/2017/07/02/How-to-use-Let-s-Encrypt/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/07/02/How-to-use-Let-s-Encrypt/</guid>
      <description>&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;因为云认证服务的商户认证体系是基于双向&lt;code&gt;SSL&lt;/code&gt;的，如果服务器端没有启用&lt;code&gt;SSL&lt;/code&gt;证书，则整个认证体系必须重构。目前的现状是申请&lt;code&gt;SSL&lt;/code&gt;证书费用比较高（一年2-3w），而且周期比较长，赶不上目前的测试进度。所以只能使用免费证书来支撑一下了。&lt;/p&gt;
&lt;p&gt;免费证书服务提供商据我所知有几个：&lt;code&gt;Let&#39;s Encrypt&lt;/code&gt;, &lt;code&gt;StartSSL&lt;/code&gt;, &lt;code&gt;StarCom&lt;/code&gt;。但是&lt;code&gt;StartSSL&lt;/code&gt;, &lt;code&gt;StarCom&lt;/code&gt;前一阵子被&lt;code&gt;Chrome&lt;/code&gt;、&lt;code&gt;Firefox&lt;/code&gt;等设置为不可信（签名流程不规范，不符合安全监管要求之类的原因），因此目前可选的只有&lt;code&gt;let&#39;s encrypt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Let&#39;s Encrypt&lt;/code&gt;是国外一个公共的免费 &lt;code&gt;SSL&lt;/code&gt; 项目，由 &lt;code&gt;Linux&lt;/code&gt; 基金会托管，它的来头不小，由&lt;code&gt;Mozilla&lt;/code&gt;、思科、&lt;code&gt;Akamai&lt;/code&gt;、&lt;code&gt;IdenTrust&lt;/code&gt;和&lt;code&gt;EFF&lt;/code&gt;等组织发起，目的就是向网站自动签发和管理免费证书，以便加速互联网由 &lt;code&gt;HTTP&lt;/code&gt; 过渡到 &lt;code&gt;HTTPS&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Ubuntu 16.04 LTS上设置DOCKER_OPTS</title>
      <link>https://orchidflower.github.io/2017/06/22/Using-DOCKER-OPTS-on-Ubuntu-16-04-LTS/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/06/22/Using-DOCKER-OPTS-on-Ubuntu-16-04-LTS/</guid>
      <description>&lt;p&gt;之前一直使用&lt;code&gt;Ubuntu 14.04&lt;/code&gt;来跑Docker。今天在16.04 LTS上跑Docker的时候发现设置&lt;code&gt;DOCKER_OPTS&lt;/code&gt;的时候有些区别，特此记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx配置导致的SSL证书认证失败</title>
      <link>https://orchidflower.github.io/2017/06/03/SSL-Authentication-Failure-caused-by-Nginx-Proxy/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/06/03/SSL-Authentication-Failure-caused-by-Nginx-Proxy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;注： 这是在之前博客上发过的文章，在实际使用中经常会有人碰到，特意转贴过来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;目前公司对外开放了一个云服务平台，提供一些功能供商户接入使用。整个项目的架构是基于Spring + MyBatis的。另外，商户端的服务接口是基于SOAP WebService的，这部分使用CXF实现。
安全方面采用了Spring Security，可以对商户提供证书认证或密码认证。但是出于安全考虑，目前只开放了证书认证。为了使用证书认证商户，我们创建了一个自签名的CA，用来生成商户使用的客户端证书。在验证上，使用Nginx验证客户端证书是否是指定CA产生的。另外，为了防止被作废的证书（例如给商户颁发了新证书后，原证书应该作废，但是原证书也是由指定CA产生的）再次使用，在代码层面对证书进行了进一步的验证（这一点是通过Nginx将客户端证书作为Header传递到Java后台实现的，有时间以后再讲）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Docker&#43;Apache2&#43;WebSVN搭建SVN服务器</title>
      <link>https://orchidflower.github.io/2017/05/26/Running-SVN-Server-using-Docker-Apache2-WebSVN/</link>
      <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/05/26/Running-SVN-Server-using-Docker-Apache2-WebSVN/</guid>
      <description>&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;虽然现在的SVN已经用的越来越少，很多人都切换到了Git上。但是以前的一些历史项目还是需要SVN支持的。
之前的SVN服务器是直接搭建在一台Ubuntu服务器上的。当时一起搭建了WebSVN。也曾经研究过怎么搭建WebSVN，但是现在也不能够工作了，时间长久了也忘了怎么搭建了。所以想研究一下怎么使用Docker来完成一样的工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过Zabbix监控业务数据（续）</title>
      <link>https://orchidflower.github.io/2017/04/20/Monitoring-data-in-mysql-using-Zabbixpart2/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/04/20/Monitoring-data-in-mysql-using-Zabbixpart2/</guid>
      <description>&lt;p&gt;昨天配置好报警条件之后，今天早上检查发现昨天晚上发出了报警。但是看上去像是误报。
在凌晨2:44:02触发了警报，然后在2:44:32警报解除，持续时间30秒。如下两图：
&lt;img src=&#34;http://blog-cache.orchidflower.cn/14926526126564.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog-cache.orchidflower.cn/14926526236724.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从感觉上像是误报。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>通过Zabbix监控业务数据</title>
      <link>https://orchidflower.github.io/2017/04/19/Monitoring-data-in-mysql-in-Zabbix/</link>
      <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/04/19/Monitoring-data-in-mysql-in-Zabbix/</guid>
      <description>&lt;p&gt;为了事后分析服务质量，我们的云认证系统将商户访问记录保存到了数据库中（MySQL）。在日志中我们记录了商户每次访问的返回结果，耗费时间等信息。通过这些信息我们可以分析发现服务什么时候性能比较低，什么时候处理效果比较差。&lt;/p&gt;
&lt;p&gt;之前通过写脚本，每小时对这些信息进行一次统计，并根据情况（如错误比例过高等）发送邮件通知给相关人员。但是这存在两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应不及时：因为一小时才统计一次，所以滞后效应太明显，经常问题已经发生很久报警才发送出来；&lt;/li&gt;
&lt;li&gt;报警条件更新不方便：报警条件只能通过脚本编写人员实现，修改起来不方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;鉴于此，一直想对这个报警体系进行改造，最后选择通过Zabbix实现这个功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker for Mac磁盘性能低下的解决办法</title>
      <link>https://orchidflower.github.io/2017/03/29/Performance-regression-on-Docker-for-Mac/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/03/29/Performance-regression-on-Docker-for-Mac/</guid>
      <description>&lt;p&gt;最近备份恢复Gogs的时候，发现同样的配置参数在Mac上访问Gogs的用户首页特别慢，大概耗时8秒，而在Linux上面运行的时候不到1秒钟。后来就上网搜索，加上自己试验，最后找到了原因应该是Gogs镜像本身的问题（可能是采用了alpine这一内核，但是具体原因不详，有待进一步实验）。&lt;/p&gt;
&lt;p&gt;这个过程中曾经怀疑是Docker运行MySQL过慢的原因，虽然最终发现不是，但是搜索过程中发现了Docker for Mac确实有性能问题，那就是对大量磁盘IO的操作性能会非常差，大概会差10倍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Ubuntu 14.04上安装Docker 17.03.0-ce</title>
      <link>https://orchidflower.github.io/2017/03/28/install-docker-17-03-0-ce-on-ubuntu-14-04/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/03/28/install-docker-17-03-0-ce-on-ubuntu-14-04/</guid>
      <description>&lt;h1 id=&#34;0-概述&#34;&gt;0. 概述&lt;/h1&gt;
&lt;p&gt;Docker在1.13.x版本之后更新了版本号规则，区分了社区版和企业版。这导致了安装方式有所变化。所以特意参考官方的帮助重新整理了一下安装步骤。&lt;/p&gt;
&lt;p&gt;适应范围：Ubuntu 14.04。安装版本：17.03.0-ce（社区版）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从一台没有外网连接的阿里云主机上访问微信API</title>
      <link>https://orchidflower.github.io/2017/02/12/access-weixin-qyapi-from-one-server-without-internet-on-aliyun/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/02/12/access-weixin-qyapi-from-one-server-without-internet-on-aliyun/</guid>
      <description>&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;公司的生产环境是部署在阿里云上的。Zabbix最初装在一台没有外网连接的ECS上，通过Nginx进行访问。但是后来发现如果需要报警，需要从Zabbix这台主机访问微信公众号服务器（qyapi.weixin.qq.com）。运维的兄弟最初选择了固定带宽的网络，但是考虑到费用问题，后期想切换到按量付费的网络，但是阿里云居然不支持这种切换（这里吐槽一下阿里的设计）。&lt;/p&gt;
&lt;p&gt;由于该主机是按照包月包年方式购买的，退掉重新申请主机安装Zabbix显然不划算。在主机到期之前，必须想办法实现在没有外网的情况下访问微信服务器（考虑到费用问题，原先固定带宽已经被修改成了0M，也就没有费用了）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Mac上启用Docker的Bash Completion</title>
      <link>https://orchidflower.github.io/2017/02/12/enable-docker-bash-completion-on-mac/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://orchidflower.github.io/2017/02/12/enable-docker-bash-completion-on-mac/</guid>
      <description>&lt;h1 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h1&gt;
&lt;p&gt;在Ubuntu上使用Docker的时候，使用tab键自动完成docker命令感觉非常方便，例如：只需要输入image或者container ID的前几位就可以使用Tab键补齐整个命令行。但是在Mac上却没有办法实现相同的操作。&lt;/p&gt;
&lt;p&gt;经过搜索终于找到了原因：原来是因为没有启用Bash completion功能导致的。而实际上Docker安装包内已经提供了针对Docker的&lt;code&gt;Bash Completion&lt;/code&gt;脚本，只需要启用即可。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
